// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  id               Int                           @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String                        @unique
  username         String                        @unique
  password         String
  typeTeacher      String //example : walikelas, guru mapel, kepsek
  typeOfStudy      String // example : penjas, ipa, matematika
  categoryTeacher  String // example : ipa, matematika, dll
  rating           Int
  roleId           Int?
  classRoom        UsersOnClassRooms[]
  classRoomStudent StudentsAndUserOnClassRooms[]
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @default(now())

  @@index([id])
}

model ClassRooms {
  id               Int                           @id @default(autoincrement())
  name             String
  location         String
  studentTotal     Int
  levelClass       Int
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @default(now())
  user             UsersOnClassRooms[]
  students         StudentsOnClassRooms[]
  studentClassRoom StudentsAndUserOnClassRooms[]
}

model MataPelajarans {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UsersOnClassRooms {
  user         Users      @relation(fields: [userId], references: [id])
  userId       Int // relation scalar field (used in the `@relation` attribute above)
  classRoom    ClassRooms @relation(fields: [classRoomId], references: [id])
  classRoomId  Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime   @default(now())
  periodeStart Int
  periodeEnd   Int
  assignedBy   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@id([userId, classRoomId])
}

model Students {
  id               Int                           @id @default(autoincrement())
  nis              String
  firstName        String
  lastName         String
  email            String
  gender           String
  dateOfBirth      String
  address          String
  parent           String
  rating           Int
  favoriteLearn    String // matika, ipa, dll
  Hobby            String //sepak bola, basket, karate, mancing, dll
  isEnterClass     Boolean                       @default(false)
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @default(now())
  classRoom        StudentsOnClassRooms[]
  classRoomStudent StudentsAndUserOnClassRooms[]

  @@index([id])
}

model Periode {
  id               Int                           @id @default(autoincrement())
  name             String?
  periodeStart     Int
  periodeEnd       Int
  classRoom        StudentsOnClassRooms[]
  classRoomStudent StudentsAndUserOnClassRooms[]
}

model StudentsOnClassRooms {
  student     Students   @relation(fields: [studentId], references: [id])
  studentId   Int // relation scalar field (used in the `@relation` attribute above)
  classRoom   ClassRooms @relation(fields: [classRoomId], references: [id])
  classRoomId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt  DateTime   @default(now())
  periode     Periode?   @relation(fields: [periodeId], references: [id])
  periodeId   Int?
  assignedBy  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  @@id([studentId, classRoomId])
}

model Absensi {
  id           Int      @id @default(autoincrement())
  teacherId    Int
  classRoomId  Int
  studentId    Int
  mapelId      Int
  absensiType  String // Sakit, bolos, alpa, terlambat
  infoTambahan Boolean
  absensiDate  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@index([id])
}

model StudentsAndUserOnClassRooms {
  student     Students   @relation(fields: [studentId], references: [id])
  studentId   Int // relation scalar field (used in the `@relation` attribute above)
  classRoom   ClassRooms @relation(fields: [classRoomId], references: [id])
  classRoomId Int // relation scalar field (used in the `@relation` attribute above)
  user        Users      @relation(fields: [userId], references: [id])
  userId      Int
  assignedAt  DateTime   @default(now())
  assignedBy  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  Periode     Periode?   @relation(fields: [periodeId], references: [id])
  periodeId   Int?

  @@id([studentId, classRoomId, userId])
}
